{
	"info": {
		"_postman_id": "e6fb610c-3fc8-4ce0-abff-526075abf6da",
		"name": "#3_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) проверка, что в body приходит правильный string\r",
							"let bodySrt = pm.response.text()\r",
							"let typeStr = typeof(bodySrt)\r",
							"\r",
							"pm.test('response include string', function() {\r",
							"    pm.expect(typeStr).to.eql('string')\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "task_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('check name, age, salary', function() {\r",
							"    pm.expect('Svetlana').to.equal(jsonData.name)\r",
							"    pm.expect('23').to.equal(jsonData.age)\r",
							"    pm.expect(1000).to.equal(jsonData.salary)\r",
							"});\r",
							"\r",
							"// 3) Спарсить request.\r",
							"let reqAns = [pm.request.body.formdata.get('name'), pm.request.body.formdata.get('age'), pm.request.body.formdata.get('salary')];\r",
							"\r",
							"pm.test('check_#3 name, age, salary', function() {\r",
							"    pm.expect(reqAns[0]).to.equal(jsonData.name)\r",
							"    pm.expect(reqAns[1]).to.equal(jsonData.age)\r",
							"    pm.expect(parseInt(reqAns[2])).to.equal(jsonData.salary)\r",
							"});\r",
							"\r",
							"// 4) Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family)\r",
							"\r",
							"// 5) Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test('check u_salary_1_5_year', function() {\r",
							"    pm.expect(parseInt(reqAns[2])*4).to.equal(jsonData.family.u_salary_1_5_year);\r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Svetlana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "task_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Спарсить response body в json.\r",
							"let bodyResp = pm.response.json();\r",
							"\r",
							"// 3) Спарсить request.\r",
							"let bodyReq = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test('check name, age, salary', function() {\r",
							"    // Проверить, что name в ответе равно name из request (name забрать из request)\r",
							"    pm.expect(bodyReq['name']).to.equal(pm.response.json().name)\r",
							"    // Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"    pm.expect(bodyReq['age']).to.equal(pm.response.json().age)\r",
							"    // Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"    pm.expect(parseInt(bodyReq['salary'])).to.equal(pm.response.json().salary)\r",
							"});\r",
							"\r",
							"// 4) Вывести в консоль параметр family из response.\r",
							"console.log(pm.response.json().family) \r",
							"\r",
							"// 5) Проверить, что у параметра dog есть параметры name.\r",
							"let dog = pm.response.json().family['pets']['dog'];\r",
							"console.log(dog)\r",
							"\r",
							"pm.test('dog have name, age', function() {\r",
							"    pm.expect(dog).to.eql(pm.response.json().family['pets']['dog'])\r",
							"});\r",
							"\r",
							"// 6) Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test('dog have name Luky', function() {\r",
							"    pm.expect(dog['name']).to.eql('Luky')\r",
							"});\r",
							"\r",
							"// 7) Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test('dog have age 4', function() {\r",
							"    pm.expect(dog['age']).to.eql(4)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Svetlana&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Спарсить response body в json из request.\r",
							"let respBody = pm.response.json();\r",
							"let reqBody = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test('check name, age', function() {\r",
							"    // Проверить, что name в ответе равно name из request (name забрать из request).\r",
							"    pm.expect(reqBody['name']).to.equal(pm.response.json().name)\r",
							"    // Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    pm.expect(parseInt(reqBody['age'])).to.equal(pm.response.json().age)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"let resSalary = pm.response.json().salary\r",
							"console.log(resSalary)\r",
							"// Вывести в консоль параметр salary из request.\r",
							"let reqSalary = parseInt(pm.request.url.query.toObject().salary)\r",
							"console.log(reqSalary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response. 1-й элемент параметра salary из response и 2-й элемент. \r",
							"for (let i=0; i < resSalary.length; i++) {\r",
							"    console.log(resSalary[i])\r",
							"}\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.), 1-й элемент параметра salary равен salary*2, 2-й элемент параметра salary равен salary*3 \r",
							"\r",
							"for (let i=1; i < resSalary.length; i++) {\r",
							"    pm.test('check salary', function(){\r",
							"        pm.expect(parseInt(resSalary[i-1])).to.eql(reqSalary*i)\r",
							"    });\r",
							"}\r",
							"// Создать в окружении переменную name, age, salary\r",
							"\r",
							"pm.environment.set(\"name\", respBody.name);\r",
							"pm.environment.set(\"salary\", reqBody.salary);\r",
							"pm.environment.set(\"age\", respBody.age);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=31&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "task_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\"\r",
							"    },\r",
							"    \"qa_salary_after_1.5_year\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_3.5_years\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_1.5_year\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_3.5_years\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"start_qa_salary, have in response\", () => {\r",
							" pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\r",
							"let personResp = pm.response.json().person.u_name // ['Alex', 2000, 31]\r",
							"let respBody = pm.response.json() \r",
							"let reqBody = [pm.request.body.formdata.get('name'), pm.request.body.formdata.get('age'), pm.request.body.formdata.get('salary')]; // [Alex, '31', '2000']\r",
							"\r",
							"\r",
							"pm.test('check salary with first element from person', function() {\r",
							"    pm.expect(personResp[1]).to.eql(parseInt(reqBody[2]))\r",
							"})\r",
							"\r",
							"pm.test('salary', function(){\r",
							"    // Проверить, что json response имеет параметр start_qa_salary\r",
							"    pm.expect(parseInt(reqBody[2])).to.eql(respBody['start_qa_salary'])\r",
							"    // Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"    pm.expect(reqBody[2]*2).to.eql(respBody['qa_salary_after_6_months'])\r",
							"    // Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"    pm.expect(reqBody[2]*2.7).to.eql(respBody['qa_salary_after_12_months'])\r",
							"    // Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"    pm.expect(reqBody[2]*3.3).to.eql(respBody['qa_salary_after_1.5_year'])\r",
							"    // Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"    pm.expect(reqBody[2]*3.8).to.eql(respBody['qa_salary_after_3.5_years'])\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('person[\"u_name\"] = salary', function() {\r",
							"    pm.expect(parseInt(reqBody[2])).to.eql(respBody.person.u_name[1])\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test('check u_age=age from request', function(){\r",
							"    pm.expect(parseInt(reqBody[1])).to.eql(respBody.person[\"u_age\"])\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"\r",
							"pm.test('check u_salary_5_years = salary*4.2', function(){\r",
							"    pm.expect(parseInt(reqBody[2]*4.2)).to.eql(respBody.person[\"u_salary_5_years\"])\r",
							"});\r",
							"\r",
							"// Цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"pm.test(\"contains person\", function () {\r",
							"Object.keys(respBody.person).forEach(function(i)  {\r",
							"  console.log(i, respBody.person[i]);\r",
							"})});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}